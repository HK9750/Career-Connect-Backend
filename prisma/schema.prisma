generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  role         Role
  createdAt    DateTime      @default(now())
  username     String
  analyses     Analysis[]
  applications Application[]
  jobs         Job[]
  resumes      Resume[]
  reviews      Review[]
}

model Resume {
  id           Int           @id @default(autoincrement())
  filePath     String
  title       String?
  ownerId      Int
  createdAt    DateTime      @default(now())
  analyses     Analysis[]
  applications Application[]
  owner        User          @relation(fields: [ownerId], references: [id])
}

model Job {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  createdAt    DateTime      @default(now())
  company      String
  recruiterId  Int
  location     String?
  tags         String[]
  analyses     Analysis[]
  applications Application[]
  recruiter    User          @relation(fields: [recruiterId], references: [id])
}

model Analysis {
  id          Int           @id @default(autoincrement())
  resumeId    Int
  jobId       Int?
  jdText      String?
  score       Float?
  feedback    Json?
  applicantId Int
  createdAt   DateTime      @default(now())
  applicant   User          @relation(fields: [applicantId], references: [id])
  job         Job?          @relation(fields: [jobId], references: [id])
  resume      Resume        @relation(fields: [resumeId], references: [id])
  Application Application[]
}

model Review {
  id            Int               @id @default(autoincrement())
  applicationId Int               @unique
  comment       String
  recruiterId   Int
  createdAt     DateTime          @default(now())

  application   Application       @relation(fields: [applicationId], references: [id])
  recruiter     User              @relation(fields: [recruiterId], references: [id])
}

// Ensure Application model has back relation
model Application {
  id            Int               @id @default(autoincrement())
  resumeId      Int
  jobId         Int
  applicantId   Int
  createdAt     DateTime          @default(now())
  analysisId    Int?
  status        ApplicationStatus @default(APPLIED)

  analysis      Analysis?         @relation(fields: [analysisId], references: [id])
  applicant     User              @relation(fields: [applicantId], references: [id])
  job           Job               @relation(fields: [jobId], references: [id])
  resume        Resume            @relation(fields: [resumeId], references: [id])
  review        Review?           // one-to-one relation to Review
}

enum Role {
  CANDIDATE
  RECRUITER
}

enum ApplicationStatus {
  APPLIED
  REVIEWED
  ACCEPTED
  REJECTED
}
